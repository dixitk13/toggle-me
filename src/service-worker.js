// Set this to true for production
var doCache = true;

// constants

const version = "0.1.0";
const cacheName = `toggle-me-${version}`;

console.log("ServiceWorker start");

window.addEventListener("load", function() {
  navigator.serviceWorker
    .register("./service-worker.js")
    .then(
      function(registration) {
        // Registration was successful
        console.log(
          "My new ServiceWorker registration successful with scope: ",
          registration.scope
        );
      },
      function(err) {
        // registration failed :(
        console.log("ServiceWorker registration failed: ", err);
      }
    )
    .catch(function(err) {
      console.log(err);
    });
});

// Delete old caches that are not our current one!
window.addEventListener("activate", event => {
  const cacheWhitelist = [cacheName];
  event.waitUntil(
    caches.keys().then(keyList =>
      Promise.all(
        keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        })
      )
    )
  );
});

// self.addEventListener('install', () => self.skipWaiting());
// self.addEventListener('activate', () => self.clients.claim());

// The first time the user starts up the PWA, 'install' is triggered.
window.addEventListener("install", function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(cacheName).then(function(cache) {
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch("manifest.json")
          .then(response => {
            response.json();
          })
          .then(assets => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            const urlsToCache = ["/", assets["main.js"]];
            cache.addAll(urlsToCache);
            console.log("cached");
          });
      })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
// self.addEventListener("fetch", function(event) {});

// self.addEventListener("fetch", function(event) {
//   if (doCache) {
//     event.respondWith(
//       caches.match(event.request).then(function(response) {
//         return response || fetch(event.request);
//       })
//     );
//   }
// });

window.addEventListener("fetch", function(event) {
  console.log("removeAttributeHandling fetch event for", event.request.url);

  event.respondWith(
    caches.match(event.request).then(function(response) {
      if (response) {
        console.log("Found response in cache:", response);

        return response;
      }

      console.log("No response found in cache. About to fetch from network...");

      return fetch(event.request)
        .then(function(response) {
          console.log("Response from network is:", response);

          return response;
        })
        .catch(function(error) {
          console.error("Fetching failed:", error);

          return caches.match("./index.html");
        });
    })
  );
});

// caching

window.addEventListener("install", e => {
  let timeStamp = Date.now();

  console.log(`install-ing @ ${timeStamp}`);

  e.waitUntil(
    caches.open(cacheName).then(cache => {
      return cache
        .addAll([
          `/`,
          `/index.html`,
          `/manifest.json`,
          `/toggle-icon.png`,
          `/toggle-icon-144.png`,
          `/toggle-icon-white.png`
        ])
        .then(() => window.skipWaiting());
    })
  );
});

window.addEventListener("activate", event => {
  event.waitUntil(window.clients.claim());
});

window.addEventListener("fetch", event => {
  event.respondWith(
    caches
      .open(cacheName)
      .then(cache => cache.match(event.request, { ignoreSearch: true }))
      .then(response => {
        return response || fetch(event.request);
      })
  );
});

// let deferredPrompt = undefined;
//
// window.addEventListener("beforeinstallprompt", function(e) {
//   console.log("beforeinstallprompt Event fired");
//
//   e.preventDefault();
//
//   // save the event so it can be triggered later.
//   deferredPrompt = e;
//
//   function addToHomeScreen() {
//     let myButton = document.querySelector(".my-prompt");
//
//     myButton.style.display = "none";
//
//     // Show the prompt
//     deferredPrompt.prompt();
//
//     // Wait for the user to respond to the prompt
//     deferredPrompt.userChoice.then(function(choiceResult) {
//       if (choiceResult.outcome === "accepted") {
//         console.log("User accepted the prompt");
//       } else {
//         console.log("User dismissed the prompt");
//       }
//
//       deferredPrompt = null;
//     });
//   }
//
//   // hiding
//   let myButton = document.querySelector(".my-prompt");
//
//   myButton.style.display = "block";
//   myButton.addEventListener("click", addToHomeScreen);
//
//   return false;
// });
